using StdTask.Data;
using System;
using System.Drawing;
using System.Windows.Forms;
using StdTask.Views;
using StdTask.Enums;

namespace StdTask
{
    public partial class AddDataDialog : Form
    {
        private HeaderData[] headers; // заголовки
        private int prevDataCount = 0; // предыдущие значение количества записей
        private string prevDataValue; // предыдущие значение ячейки

        public AddDataDialog(HeaderData[] hData)
        {
            InitializeComponent();
            /* Настройка компонентов */
            headers = hData;
            addDataPanel.AutoScroll = true; // включение автоскрола
            dataNumericUpDown.Maximum = Properties.Settings.Default.StudentsInGroupMax; // установка максимального количества записей
            /* Заполнение заголовков */
            var width = 0; // ширина заголовков

            foreach (HeaderData data in hData)
            {
                var column = new DataGridViewColumn();

                switch (data.ColumnType)
                {
                    case ColumnType.TextBox:
                        column = new DataGridViewTextBoxColumn();
                        break;

                    case ColumnType.CheckBox:
                        column = new DataGridViewCheckBoxColumn();
                        break;
                }

                column.Name = data.Name;
                column.HeaderText = data.Text;
                column.Visible = !data.ReadOnly;

                width += data.ReadOnly ? 0 : column.Width; 
                addDataGridView.Columns.Add(column);
            }
            /* Настройка ширины формы */
            if (width > 1024)
                width = 1024;

            Size = new Size(width + 18, Size.Height);
        }
        /* Возвращает добавленные данные */
        public object[,] Contents
        {
            get
            {
                object[,] result = new object[addDataGridView.Rows.Count, addDataGridView.Columns.Count];

                for (int i = 0; i < result.GetLength(0); i++) // строки
                {
                    for (int j = 0; j < result.GetLength(1); j++) { // столбцы
                        result[i, j] = addDataGridView[j, i].Value;
                    }
                }

                return result;
            }
        }
        /* Возвращает случайное значение из файла */
        private string GetRandomContentFromFile(string path)
        {
            var cFile = new FileManager<ContentData>(path);
            var content = cFile.OpenAllText();
            var random = new Random();
            var index = random.Next(0, content.Values.Length);

            return content.Values[index];
        }
        /* Возвращает случайную оценку */
        private int GetRandomMark()
        {
            System.Threading.Thread.Sleep(10); // задержка, иначе генерируются одинаковые значения
            var random = new Random();
            return random.Next(2, 5 + 1);
        }
        /* Возвращает случайное значение bool */
        private bool GetRandomPriority()
        {
            var random = new Random();
            return Convert.ToBoolean(random.Next(1 + 1));
        }
        /* Генерирует значения в таблицу */
        private object GenerateData(string column)
        {
            object result = null;

            if (column.Contains("group"))
                result = GetRandomContentFromFile(Properties.Settings.Default.GroupsPath);

            if (column.Contains("secondName"))
                result = GetRandomContentFromFile(Properties.Settings.Default.NamesPath);

            if (column.Contains("subject"))
                result = GetRandomMark();

            if (column.Contains("priority"))
                result = GetRandomPriority();


            return result;
        }
        /* При изменение количества записей */
        private void dataNumericUpDown_ValueChanged(object sender, EventArgs e)
        {
            /* Если значение > старого значения добавляем строку */
            /* Иначе удаляем последнюю строку */
            if (dataNumericUpDown.Value > prevDataCount)
            {
                /* Если генерация данных включена */
                if (autoGenerateDataCheckBox.Checked)
                {
                    addDataGridView.Rows.Add();

                    foreach (DataGridViewColumn column in addDataGridView.Columns) {
                        addDataGridView[column.Name, addDataGridView.Rows.Count - 1].Value = GenerateData(column.Name);
                    }
                }
                else
                    addDataGridView.Rows.Add();
            }
            else
                addDataGridView.Rows.RemoveAt(addDataGridView.RowCount - 1);

            prevDataCount = (int)dataNumericUpDown.Value; // запоминаем количество записей
        }
        /* при начале изменнеия данных ячейки */
        private void addDataGridView_CellBeginEdit(object sender, DataGridViewCellCancelEventArgs e)
        {
            prevDataValue = Convert.ToString(addDataGridView[e.ColumnIndex, e.RowIndex].Value); // запоминаем значение перед редактированием
        }
        /* При завершении изменения данных ячейки */
        private void addDataGridView_CellEndEdit(object sender, DataGridViewCellEventArgs e)
        {
            if (headers[e.ColumnIndex].View == null)
                return;

            try
            {
                var value = addDataGridView[e.ColumnIndex, e.RowIndex].Value;
                addDataGridView[e.ColumnIndex, e.RowIndex].Value = headers[e.ColumnIndex].View.IsValid(value); // проверка на валидность и возвращение отредактированного значения
            }
            catch (Exception ex)
            {
                addDataGridView[e.ColumnIndex, e.RowIndex].Value = prevDataValue;
                MessageBox.Show(this, ex.Message, "Предупреждение", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
        }
        /* Перехват закрытия окна */
        private void AddDataDialog_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (e.CloseReason != CloseReason.UserClosing)
            {
                bool isCancel = false;
                for (int i = 0; i < addDataGridView.Rows.Count; i++)
                {
                    for (int j = 0; j < addDataGridView.Columns.Count; j++)
                    {
                        if (addDataGridView[j, i].Value == null && addDataGridView.Columns[j].Visible)
                        {
                            /* Перевод пустого checkbox в false */
                            if (headers[j].View != null)
                            {
                                if (Equals(headers[j].View.GetType(), typeof(PriorityView)))
                                    addDataGridView[j, i].Value = false;
                            }

                            MessageBox.Show(this, "Не все поля заполнены!", "Предупреждение", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            isCancel = true;
                            e.Cancel = true;
                            break;
                        }
                    }

                    if (isCancel)
                        break;
                }
            }
        }
    }
}
